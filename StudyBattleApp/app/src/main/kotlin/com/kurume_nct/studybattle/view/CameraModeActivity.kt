package com.kurume_nct.studybattle.view

import com.kurume_nct.studybattle.R

import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.app.ProgressDialog
import android.content.ContentValues
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.support.v4.app.ActivityCompat
import android.support.v4.content.FileProvider
import android.content.Intent
import android.databinding.DataBindingUtil
import android.graphics.BitmapFactory
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.net.Uri
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.widget.*
import com.bumptech.glide.Glide
import com.kurume_nct.studybattle.client.ServerClient
import com.kurume_nct.studybattle.databinding.*
import com.kurume_nct.studybattle.model.Air
import com.kurume_nct.studybattle.model.Bomb
import com.kurume_nct.studybattle.model.ProblemOpenAction
import com.kurume_nct.studybattle.model.UnitPersonal
import com.kurume_nct.studybattle.tools.ImageViewActivity
import com.kurume_nct.studybattle.tools.ProgressDialogTool
import com.kurume_nct.studybattle.tools.ToolClass
import io.reactivex.Observable
import io.reactivex.Single
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.schedulers.Schedulers

import java.io.File
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.Date


class CameraModeActivity : Activity() {

    private val RESULT_CAMERA = 1001
    private val RESULT_PICK_IMAGEFILE = 1000
    private val REQUEST_PERMISSION = 1002
    private lateinit var submitImageButton: ImageButton
    private lateinit var submitItemImageButton: ImageButton
    private var bmp1: Bitmap? = null
    private var cameraFile: File? = null
    private var cameraUri: Uri? = null
    private var problemUrl = ""
    private var filePath: String? = null
    private lateinit var dialog: AlertDialog
    private var putItemId = -1
    private lateinit var unitPer: UnitPersonal
    private var answerUri: Uri? = null
    private var problemId = 0
    private lateinit var submissionButton: Button
    private lateinit var passButton: Button
    lateinit var progress: ProgressDialog
    lateinit var dialogView: DialogItemSelectBinding
    private lateinit var problemImage: ImageView
    private lateinit var problemName: TextView
    private lateinit var writerName: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        unitPer = application as UnitPersonal
        progress = ProgressDialogTool(this).makeDialog()

        setContentView(R.layout.activity_camera_mode)
        // ÂÆ£Ë®Ä
        submitImageButton = findViewById(R.id.submit_image_button) as ImageButton
        submitItemImageButton = findViewById(R.id.submit_item_image_button) as ImageButton
        submissionButton = findViewById(R.id.submission_button) as Button
        passButton = findViewById(R.id.pass_button) as Button
        problemImage = findViewById(R.id.problem_image_at_camera) as ImageView
        problemName = findViewById(R.id.problem_name_at_camera) as TextView
        writerName = findViewById(R.id.writer_name_at_camera) as TextView

        problemId = intent.getIntExtra("problemId", 0)
        if (problemId == 0) {
            Toast.makeText(this, "„ÇÑ„ÇäÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ", Toast.LENGTH_SHORT).show()
            finish()
        }

        problemImage.apply {
            setOnClickListener {
                val intent = Intent(context, ImageViewActivity::class.java)
                intent.putExtra("url", problemUrl)
                startActivity(intent)
            }
            isClickable = false
        }

        openProblemServer()

        Glide.with(this).load(R.drawable.hatena).into(submitItemImageButton)
        onGetProblemInfo()

        //(uri„Å´„Å§„ÅÑ„Å¶„ÅÆÂÆüÈ®ìÊ©üËÉΩ)
        if (savedInstanceState != null) {
            cameraUri = savedInstanceState.getParcelable("CaptureUri")
        }

        submitImageButton.setOnClickListener {
            imageSetting()
        }

        submitItemImageButton.setOnClickListener {
            itemSetting()
        }

        //„Éë„Çπ„Åô„Çã„Éú„Çø„É≥
        passButton.setOnClickListener {
            sadDialog()
        }

        //ÊèêÂá∫„Åô„Çã„Éú„Çø„É≥
        submissionButton.setOnClickListener {
            if (answerUri == null) {
                Toast.makeText(this, "ÂÜôÁúü„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ", Toast.LENGTH_SHORT).show()
            } else {
                sendProblemServer()
            }
        }

        dialogView = DataBindingUtil.inflate(
                LayoutInflater.from(this), R.layout.dialog_item_select, null, false)

        getItemData()

        unitPer.itemCount.run {
            if (bomb <= 0) dialogView.bombButton17.visibility = View.INVISIBLE
            if (card <= 0) dialogView.cardButton16.visibility = View.INVISIBLE
            if (magicHand <= 0) dialogView.handButton12.visibility = View.INVISIBLE
        }

        dialog = AlertDialog.Builder(this)
                .setView(dialogView.root)
                .create()

        dialogView.bombButton17.setOnClickListener {
            if (putItemId != 0) {
                Glide.with(this).load(R.drawable.framecard_bomb).into(submitItemImageButton)
            }
            putItemId = 0
            dialog.dismiss()
        }
        dialogView.cardButton16.setOnClickListener {
            if (putItemId != 1) {
                Glide.with(this).load(R.drawable.framecard_card).into(submitItemImageButton)
            }
            putItemId = 1
            dialog.dismiss()
        }
        dialogView.handButton12.setOnClickListener {
            if (putItemId != 3) {
                Glide.with(this).load(R.drawable.framecard_magichand).into(submitItemImageButton)
            }
            putItemId = 3
            dialog.dismiss()
        }
        dialogView.removeItemButton19.setOnClickListener {
            if (putItemId != -1) {
                Glide.with(this).load(R.drawable.hatena).into(submitItemImageButton)
            }
            putItemId = -1
            dialog.dismiss()
        }
    }

    private fun onGetProblemInfo() {
        val progressDialog = ProgressDialogTool(this).makeDialog()
        progressDialog.show()
        val client = ServerClient(unitPer.authenticationKey)
        client
                .getProblem(problemId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .flatMap {
                    problemName.text = it.title
                    client
                            .getUser(it.ownerId)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe {
                                writerName.text = it.displayName
                            }
                    client
                            .getImageById(it.imageIds[0])
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                }
                .subscribe({
                    problemUrl = it.url
                    setUpPicture(Uri.parse(problemUrl))
                    problemImage.isClickable = true
                    progressDialog.dismiss()
                }, {
                    it.printStackTrace()
                    progressDialog.dismiss()
                })
    }

    fun setUpPicture(uri: Uri) {
        Glide.with(this).load(uri).into(problemImage)
    }

    private fun sendProblemServer() {
        val client = ServerClient(unitPer.authenticationKey)
        val uri: Uri = answerUri!!

        progress.show()
        client
                .uploadImage(uri, this)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .flatMap {
                    val imageId = it.id
                    client
                            .createSolution(
                                    text = "‰∫ãÂâçÊèêÂá∫„ÇÄ„Çä„ÄÇ„Åø„Çì„Å™È¨±„Å´„Å™„Å£„Å°„ÇÉ„ÅÜ„ÄÇ",
                                    problemId = problemId,
                                    imageIds = listOf(imageId),
                                    item =
                                    when (putItemId) {
                                        0 -> {
                                            Bomb
                                        }
                                        1 -> {
                                            Bomb/*Card*/
                                        }
                                        2 -> {
                                            Air/*Magic*/
                                        }
                                        else -> {
                                            Air
                                        }
                                    }
                            )
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                }.subscribe({
            progress.dismiss()
            startActivity(Intent(this, LotteryActivity::class.java))
            finish()
        }, {
            progress.dismiss()
            it.printStackTrace()
            Toast.makeText(this, "Ëß£Á≠îÊèêÂá∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„ÉàÁí∞Â¢É„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", Toast.LENGTH_SHORT).show()
        })
    }

    private fun getItemData() {
        ToolClass(this).onRefreshItemData()
    }

    private fun sadDialog() {
        //send dataüì©
        ServerClient(unitPer.authenticationKey)
                .passProblem(problemId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe {
                    val passAlert = AlertDialog.Builder(this)
                    val passView = this.layoutInflater.inflate(R.layout.dialog_pass_sad, null)
                    passView.setOnClickListener {
                        finish()
                    }
                    passAlert.setOnDismissListener {
                        finish()
                    }
                    passAlert.setView(passView)
                    val alert = passAlert.create()
                    alert.window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                    alert.show()
                }
    }

    private fun imageSetting() {
        val dialogView: DialogCameraStrageChooseBinding = DataBindingUtil.inflate(
                LayoutInflater.from(this), R.layout.dialog_camera_strage_choose, null, false
        )
        var dialog_: AlertDialog = AlertDialog.Builder(this)
                .setView(dialogView.root)
                .create()
        dialogView.run {
            cameraButton.setOnClickListener {
                dialog_.cancel()
                // Android 6, API 23‰ª•‰∏ä„Åß„Éë„Éº„Éü„ÉÉ„Ç∑„É≥„ÅÆÁ¢∫Ë™ç
                if (Build.VERSION.SDK_INT >= 23) {
                    checkPermission()
                } else {
                    cameraIntent()
                }
            }
            strageButton.setOnClickListener {
                dialog_.cancel()
                //„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû
                val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)
                //Èñã„Åë„Çã„ÇÇ„ÅÆ„Å†„ÅëË°®Á§∫
                intent.addCategory(Intent.CATEGORY_OPENABLE)
                //„Ç§„É°„Éº„Ç∏„ÅÆ„Åø„ÇíË°®Á§∫„Åô„Çã„Éï„Ç£„É´„Çø
                intent.type = "image/*"
                startActivityForResult(intent, RESULT_PICK_IMAGEFILE)
            }
        }
        dialog_ = AlertDialog.Builder(this)
                .setView(dialogView.root)
                .create()

        dialog_.show()
    }

    private fun itemSetting() {
        dialog.show()
    }


    //„Ç≠„É£„Éó„ÉÅ„É£„Éº„Éë„ÇπÂèñÂæóÈñ¢Êï∞
    override fun onSaveInstanceState(outState: Bundle) {
        outState.putParcelable("CaptureUri", cameraUri)
    }

    //ÁîªÂÉèÈñ¢ÈÄ£„ÅÆÂá¶ÁêÜÈñ¢Êï∞
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        if (requestCode == RESULT_CAMERA) {
            //„Ç´„É°„É©ÊíÆÂΩ±„ÅÆÂá¶ÁêÜ
            if (cameraUri != null) {
                submitImageButton.setImageURI(cameraUri)
                registerDatabase(filePath)
            } else {
                Log.d("debug", "cameraUri == null")
            }

        } else if (requestCode == RESULT_PICK_IMAGEFILE && resultCode == Activity.RESULT_OK) {
            //„ÇÆ„É£„É©„É™„Éº„Åã„Çâ„ÅÆÂÜôÁúü„ÇíÈÅ∏Êäû
            var uri: Uri? = null
            if (data != null) {
                uri = data.data
                Log.i("", "Uri: " + uri!!.toString())
                answerUri = uri

                try {
                    bmp1 = getBitmapFromUri(uri)
                    submitImageButton.setImageBitmap(bmp1)
                } catch (e: IOException) {
                    e.printStackTrace()
                }

            }

        }
    }

    //„Ç´„É°„É©ÊíÆÂΩ±„Åó„ÅüÈöõ„ÅÆÁîªÂÉè„Çí‰øùÂ≠ò„Åô„Çã„Éï„Ç©„É´„ÉÄ‰ΩúÊàêÈñ¢Êï∞
    private fun cameraIntent() {
        // ‰øùÂ≠òÂÖà„ÅÆ„Éï„Ç©„É´„ÉÄ„Éº„Çí‰ΩúÊàê
        val cameraFolder = File(
                Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), ""
        )
        cameraFolder.mkdirs()

        // ‰øùÂ≠ò„Éï„Ç°„Ç§„É´Âêç
        val fileName = SimpleDateFormat("ddHHmmss").format(Date())
        filePath = cameraFolder.path + "/" + fileName + ".jpg"
        Log.d("debug", "filePath:" + filePath!!)


        // captureÁîªÂÉè„ÅÆ„Éï„Ç°„Ç§„É´„Éë„Çπ
        cameraFile = File(filePath!!)
        //        cameraUri = Uri.fromFile(cameraFile);
        cameraUri = FileProvider.getUriForFile(this@CameraModeActivity, applicationContext.packageName + ".provider", cameraFile)

        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        intent.putExtra(MediaStore.EXTRA_OUTPUT, cameraUri)
        startActivityForResult(intent, RESULT_CAMERA)
    }

    //ÁîªÂÉè„Çí„ÇÆ„É£„É©„É™„Éº„Åã„ÇâÈÅ∏„Çì„ÅßÂèñÂæó„Åó„Å¶Ëøî„ÅôÔºüÔºàÂ§öÂàÜÔºâ
    @Throws(IOException::class)
    private fun getBitmapFromUri(uri: Uri): Bitmap {
        val parcelFileDescriptor = contentResolver.openFileDescriptor(uri, "r")
        val fileDescriptor = parcelFileDescriptor!!.fileDescriptor
        val image = BitmapFactory.decodeFileDescriptor(fileDescriptor)
        parcelFileDescriptor.close()
        return image
    }

    //„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Á¢∫Ë™çÈñ¢Êï∞
    private fun checkPermission() {
        // Êó¢„Å´Ë®±ÂèØ„Åó„Å¶„ÅÑ„Çã
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
            cameraIntent()
        } else {
            requestLocationPermission()
        }// ÊãíÂê¶„Åó„Å¶„ÅÑ„ÅüÂ†¥Âêà
    }

    // Ë®±ÂèØ„ÇíÊ±Ç„ÇÅ„ÇãÈñ¢Êï∞
    private fun requestLocationPermission() {
        if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
            ActivityCompat.requestPermissions(this@CameraModeActivity,
                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), REQUEST_PERMISSION)

        } else {
            val toast = Toast.makeText(this, "Ë®±ÂèØ„Åï„Çå„Å™„ÅÑ„Å®„Ç¢„Éó„É™„ÅåÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì", Toast.LENGTH_SHORT)
            toast.show()

            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), REQUEST_PERMISSION)

        }
    }


    // ÁµêÊûú„ÅÆÂèó„ÅëÂèñ„Çä„Åô„ÇãÈñ¢Êï∞
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        if (requestCode == REQUEST_PERMISSION) {
            // ‰ΩøÁî®„ÅåË®±ÂèØ„Åï„Çå„Åü
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                cameraIntent()
            } else {
                // „Åù„Çå„Åß„ÇÇÊãíÂê¶„Åï„Çå„ÅüÊôÇ„ÅÆÂØæÂøú
                val toast = Toast.makeText(this, "„Ç´„É°„É©„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô", Toast.LENGTH_SHORT)
                toast.show()
            }
        }
    }

    // „Ç¢„É≥„Éâ„É≠„Ç§„Éâ„ÅÆ„Éá„Éº„Çø„Éô„Éº„Çπ„Å∏ÁôªÈå≤„Åô„ÇãÈñ¢Êï∞
    private fun registerDatabase(file: String?) {
        val contentValues = ContentValues()
        val contentResolver = this@CameraModeActivity.contentResolver
        contentValues.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg")
        contentValues.put("_data", file)
        contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)
    }

    private var actionSignal = ProblemOpenAction.NONE
    private fun onBombDialog() {
        val dialog1 = Dialog(this)
        val image = ImageView(this)
        image.run {
            setImageResource(R.drawable.bomb)
            scaleType = ImageView.ScaleType.FIT_CENTER
            adjustViewBounds = true
            setOnClickListener {
                dialog1.cancel()
            }
        }

        dialog1.run {
            setContentView(image)
            window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            setOnDismissListener {
                when (actionSignal) {
                    ProblemOpenAction.EXPLODED -> {
                        onExpandDialog()
                    }
                    ProblemOpenAction.DEFENDED -> {
                        onShieldDialog()
                    }
                    else -> {
                        Log.ERROR
                    }
                }
            }
            show()
        }
    }

    private fun onShieldDialog() {
        val dialog1 = Dialog(this)
        val image = ImageView(this)
        image.run {
            setImageResource(R.drawable.shield)
            scaleType = ImageView.ScaleType.FIT_CENTER
            adjustViewBounds = true
            background
            setOnClickListener {
                dialog1.cancel()
            }
        }
        dialog1.run {
            setContentView(image)
            window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            show()
        }
    }

    private fun onExpandDialog() {
        val dialog1 = Dialog(this)
        val image = ImageView(this)
        image.run {
            setImageResource(R.drawable.bomb_second)
            scaleType = ImageView.ScaleType.FIT_CENTER
            adjustViewBounds = true
            setOnClickListener {
                dialog1.cancel()
            }
        }
        dialog1.run {
            setContentView(image)
            window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            show()
        }

    }

    private fun openProblemServer() {
        ServerClient(unitPer.authenticationKey)
                .openProblem(problemId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe {
                    actionSignal = it.openAction
                    when (actionSignal) {
                        ProblemOpenAction.NONE -> {
                            Toast.makeText(this, "ÁàÜÂºæ„ÅØ„Å§„ÅÑ„Å¶„Åæ„Åõ„Çì", Toast.LENGTH_SHORT)
                        }
                        else -> {
                            onBombDialog()
                        }
                    }

                }
    }

}



